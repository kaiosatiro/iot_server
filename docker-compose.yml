
volumes:
  app-db-data:

networks:
  internal_network:

services:

  db:
    image: postgres:12
    restart: always
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
  
  adminer:
    image: adminer
    networks:
      - internal_network
      - default
    ports:
      - "8080:8080"
    depends_on:
      - db
    # environment:
      # - ADMINER_DESIGN=pepa-linha-dark

  rabbitmq:
    image: rabbitmq:3.13-management
    restart: always
    networks:
      - internal_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 15s
      retries: 15

  logging:
    build: 
      context: ./logging
      args:
        ENVIRONMENT: ${ENVIRONMENT}
        LOG_INFO_LOCAL_PATH: ${LOG_INFO_LOCAL_PATH}
    networks:
      - internal_network
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - RABBITMQ_DNS=${RABBITMQ_DNS}
      - LOG_INFO_LOCAL_PATH=${LOG_INFO_LOCAL_PATH}
      - LOG_EXCHANGE=${LOG_EXCHANGE}
      - LOG_EXCHANGE_TYPE=${LOG_EXCHANGE_TYPE}
      - LOG_QUEUE=${LOG_QUEUE}
      - LOG_ROUTING_KEY=${LOG_ROUTING_KEY}
    
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
    volumes:
      - ./logs/:${LOG_INFO_LOCAL_PATH}
  
  userapi:
    build: 
      context: ./user_apiz
      args:
        ENVIRONMENT: ${ENVIRONMENT}
    networks:
      - default
      - internal_network
    ports:
      - "8000:8000"
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - ENVIRONMENT=${ENVIRONMENT}
      - DOMAIN=${DOMAIN}
      - API_V1_STR=${API_V1_STR}
      - VERSION=${VERSION}
      - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
      #Database
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      #Superuser
      - FIRST_SUPERUSERNAME=${FIRST_SUPERUSERNAME} # change to secret
      - FIRST_SUPERUSER_EMAIL=${FIRST_SUPERUSER_EMAIL} # change to secret
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD} # change to secret
      #RabbitMQ
      - RABBITMQ_DNS=${RABBITMQ_DNS}
      #Emails
      - SMTP_TLS=${SMTP_TLS}
      - SMTP_SSL=${SMTP_SSL}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - EMAILS_FROM_NAME=${EMAILS_FROM_NAME}

    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
      db:
        condition: service_started
    
  receiver:
    build: 
      context: ./receiver
      args:
        ENVIRONMENT: ${ENVIRONMENT}
    networks:
      - default
      - internal_network
    ports:
      - "8100:8000"
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - ENVIRONMENT=${ENVIRONMENT}
      - DOMAIN=${DOMAIN}
      - RECEIVER_API_V1_STR=${RECEIVER_API_V1_STR}
      - RECEIVER_VERSION=${RECEIVER_VERSION}
      #RabbitMQ
      - RABBITMQ_DNS=${RABBITMQ_DNS}
      - MESSAGES_EXCHANGE=${MESSAGES_EXCHANGE}
      - MESSAGES_QUEUE=${MESSAGES_QUEUE}
      - MESSAGES_ROUTING_KEY=${MESSAGES_ROUTING_KEY}
      - MESSAGES_DECLARE_EXCHANGE=${MESSAGES_DECLARE_EXCHANGE}

    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
