[tool.poetry]
name = "receiver"
version = "0.1.0"
description = ""
authors = ["kaiosatiro <kaiosatiro@gmail.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
pydantic-settings = "^2.4.0"
tenacity = "^9.0.0"
fastapi = "^0.112.0"
httpx = "^0.27.0"
uvicorn = {extras = ["standard"], version = "^0.30.5"}
fastapi-cli = "^0.0.5"
pyjwt = "^2.9.0"
pika = "^1.3.2"
asgi-correlation-id = "^4.3.2"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.2"
pytest-asyncio = "^0.23.8"
asyncmock = "^0.4.2"
mypy = "^1.11.1"
ruff = "^0.5.7"
flake8 = "^7.1.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.flake8]
ignore = "BLK100"

[tool.mypy]
strict = true
exclude = ["venv", ".venv"]

[tool.ruff]
target-version = "py312"
exclude = ["venv", ".venv"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
    "F401", # unused imports
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true